#version 450

struct Material {
    vec4 albedo;           // [漫反射权重, 镜面反射权重, 反射权重, 折射权重]
    vec4 diffuse_specular; // rgb:漫反射颜色, a:镜面反射指数 
    vec4 refractive;       // x:折射率, yzw:保留 
};

struct Sphere {
    vec4 center_radius;    // xyz:中心, w:半径 
    Material material;
};

struct Ray {
    vec4 dir;
    vec4 resultColor;
};

layout (binding = 0) uniform ParameterUBO {
    Sphere sphere0;
    Sphere sphere1;
    Sphere sphere2;
    Sphere sphere3;
    vec4 light0;
    vec4 light1;
    vec4 light2;
    vec4 camPos;
} ubo;

layout(std140, binding = 1) readonly buffer RaySSBOIn {
    Ray rayIn[];
};

 layout(std140, binding = 2) buffer RaySSBOOut {
     Ray rayOut[];
 };

//  添加输出图像
layout (binding = 3, rgba8) uniform image2D outputImage;

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

const int MAX_DEPTH = 20;
const int MAX_STACK_SIZE = MAX_DEPTH * 2 ;
const vec3 BACKGROUND_COLOR = vec3(0.2, 0.7, 0.8);
const float MIN_EPSILON = 0.001;
const int WIDTH = 1920;
const int HEIGHT = 1080;
const float GAMMA = 2.2;

vec3 custom_refract(vec3 I, vec3 N, float eta_out, float eta_in) {
    bool isEntering = dot(I, N) < 0.0;
    vec3 faceNormal = isEntering ? N : -N;
    float cosi = clamp(dot(-I, faceNormal), 0.0, 1.0);
    float eta = isEntering ? eta_in / eta_out : eta_out / eta_in;
    float sint2 = eta * eta * (1.0 - cosi * cosi);
    if (sint2 > 1.0) {
        return vec3(1.0, 0.0, 0.0);
    }
    float k = sqrt(1.0 - sint2);
    vec3 refractDir = eta * I + (eta * cosi - k) * faceNormal;
    return normalize(refractDir);
}

bool ray_sphere_intersect(vec3 orig, vec3 dir, Sphere s, out float t) {
    vec3 L = s.center_radius.xyz - orig;
    float tca = dot(L, dir);
    float d2 = dot(L, L) - tca * tca;
    float r2 = s.center_radius.w * s.center_radius.w;
    if (d2 > r2) return false;
    float thc = sqrt(r2 - d2);
    float t0 = tca - thc;
    float t1 = tca + thc;
    if (t0 > MIN_EPSILON) t = t0;
    else if (t1 > MIN_EPSILON) t = t1;
    else return false;
    return true;
}

struct SceneHit {
    bool hit;
    float distance;
    vec3 point;
    vec3 normal;
    Material material;
};

void scene_intersect(vec3 orig, vec3 dir, out SceneHit nearest) {
    nearest.hit = false;
    nearest.distance = 1e10;

    if (abs(dir.y) > MIN_EPSILON) {
        float t = -(orig.y + 4.0) / dir.y;
        if (t > MIN_EPSILON && t < nearest.distance) {
            vec3 p = orig + dir * t;
            if (abs(p.x) < 10.0 && p.z < -10.0 && p.z > -30.0) {
                nearest.hit = true;
                nearest.distance = t;
                nearest.point = p;
                nearest.normal = vec3(0.0, 1.0, 0.0);
                vec3 color = (mod(floor(p.x * 0.5 + 1024.0) + floor(p.z * 0.5), 2.0) == 0.0) ? vec3(0.3) : vec3(0.3, 0.2, 0.1);
                nearest.material.albedo = vec4(2.0, 0.0, 0.0, 0.0);
                nearest.material.diffuse_specular = vec4(color, 1.0);
                nearest.material.refractive = vec4(1.0, 0.0, 0.0, 0.0);
            }
        }
    }

    Sphere spheres[4] = {ubo.sphere0, ubo.sphere1, ubo.sphere2, ubo.sphere3};
    for (int i = 0; i < 4; i++) {
        float t = 1e10;
        if (ray_sphere_intersect(orig, dir, spheres[i], t) && t < nearest.distance) {
            vec3 p = orig + dir * t;
            nearest.hit = true;
            nearest.distance = t;
            nearest.point = p;
            nearest.normal = normalize(p - spheres[i].center_radius.xyz);
            nearest.material = spheres[i].material;
        }
    }
}

bool shadow_intersect(vec3 orig, vec3 dir, float max_dist) {
    Sphere spheres[4] = {ubo.sphere0, ubo.sphere1, ubo.sphere2, ubo.sphere3};
    for (int i = 0; i < 4; i++) {
        float t = 1e10;
        if (ray_sphere_intersect(orig, dir, spheres[i], t) && t < max_dist) {
            return true;
        }
    }
    return false;
}

struct PathSegment {
    vec3 origin;
    vec3 direction;
    vec3 throughput;
    int depth;
};

vec3 cast_ray(vec3 orig, vec3 dir) {
    vec3 color = vec3(0.0);
    PathSegment stack[MAX_STACK_SIZE];
    int stackSize = 0;
    stack[stackSize++] = PathSegment(orig, dir, vec3(1.0), 0);

    while (stackSize > 0) {
        PathSegment segment = stack[--stackSize];
        if (segment.depth >= MAX_DEPTH || dot(segment.throughput, segment.throughput) < 0.001) continue;

        SceneHit hit;
        scene_intersect(segment.origin, segment.direction, hit);
        if (!hit.hit) {
            color += segment.throughput * BACKGROUND_COLOR;
            continue;
        }

        vec3 p = hit.point;
        vec3 n = hit.normal;
        vec3 v = -segment.direction;
        vec3 diffuse = vec3(0.0);
        vec3 specular = vec3(0.0);
        vec3 lights[3] = {ubo.light0.xyz, ubo.light1.xyz, ubo.light2.xyz};

        for (int i = 0; i < 3; i++) {
            vec3 light_dir = normalize(lights[i] - p);
            float light_dist = length(lights[i] - p);
            if (shadow_intersect(p + light_dir * MIN_EPSILON, light_dir, light_dist)) continue;

            float diff = max(0.0, dot(n, light_dir));
            diffuse += diff * hit.material.diffuse_specular.rgb;

            vec3 reflect_dir = reflect(-light_dir, n);
            float spec = pow(max(0.0, dot(reflect_dir, v)), hit.material.diffuse_specular.a);
            specular += spec * vec3(1.0);
        }

        color += segment.throughput * (diffuse * hit.material.albedo.x + specular * hit.material.albedo.y);

        if (hit.material.albedo.z > 0.0 && stackSize < MAX_STACK_SIZE) {
            vec3 next_dir = reflect(segment.direction, n);
            vec3 next_origin = p + next_dir * MIN_EPSILON;
            vec3 next_throughput = segment.throughput * hit.material.albedo.z;
            stack[stackSize++] = PathSegment(next_origin, next_dir, next_throughput, segment.depth + 1);
        }

        if (hit.material.albedo.w > 0.0 && stackSize < MAX_STACK_SIZE) {
            vec3 refract_dir = custom_refract(segment.direction, n, hit.material.refractive.x, 1.0);
            if (refract_dir != vec3(1.0, 0.0, 0.0)) {
                vec3 next_origin = p + refract_dir * MIN_EPSILON;
                vec3 next_throughput = segment.throughput * hit.material.albedo.w;
                stack[stackSize++] = PathSegment(next_origin, refract_dir, next_throughput, segment.depth + 1);
            }
        }
    }

    return clamp(color, vec3(0.0), vec3(1.0));
}

void main() {
    ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
    if (uv.x >= WIDTH || uv.y >= HEIGHT) return;

    uint idx = uv.y * WIDTH + uv.x;

    // 获取输入 Ray
    Ray ray = rayIn[idx];
    vec3 ray_dir = normalize(ray.dir.xyz);
    vec3 ray_orig = vec3(0.0, 0.0, 0.0);
    ray_orig = ubo.camPos.xyz;
    vec3 color = cast_ray(ray_orig, ray_dir);
    
    color = pow(color, vec3(GAMMA));
    
    // 写入 image2D 和 SSBO
    imageStore(outputImage, uv, vec4(color, 1.0));
    rayOut[idx].resultColor = vec4(color, 1.0);
}